---
AWSTemplateFormatVersion: "2010-09-09"
Description: "SSM document to restart Avalanche node process to whitelist subnet"

Parameters:
  DocumentName:
    Type: String
    Default: WhitelistSubnetWhitelistSubnetV0
    Description: SSM document Name.

  VmId:
    Type: String
    Default: srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy
    Description: Vm Id (must match with the binary path).

  # e.g., avalanchego_config.subnet_config_dir).join("...")
  SubnetConfigDirectory:
    Type: String
    Default: /data/avalanche-configs/subnets
    Description: Subnet configuration directory (e.g., /data/avalanche-configs/subnets/C.json)

  PlaceHolderWhitelistedSubnetId:
    Type: String
    Default: hac2sQTf29JJvveiJssb4tz8TNRQ3SyKSW7GgcwGTMk3xabgf
    Description: Whitelisted subnet Id that was used as a placeholder.

  NewWhitelistedSubnetId:
    Type: String
    Default: ""
    Description: New subnet id to whitelist.

Resources:
  RestartAvalancheNodeWhitelistSubnet:
    # https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_CreateDocument.html
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Name: !Ref DocumentName
      Tags:
        - Key: DocumentName
          Value: !Ref DocumentName
        - Key: DocumentVersion
          Value: "v0"
      Content:
        schemaVersion: "2.2"
        description: WhitelistSubnetWhitelistSubnet
        parameters:
          executionTimeout:
            type: String
            description: "timeout for run on all instances"
            default: "50000"
          scriptTimeout:
            type: String
            description: "timeout for script on individual instance"
            default: "3600"
          vmId:
            type: String
            description: Vm Id (must match with the binary path).
            default: !Ref VmId
          subnetConfigDirectory:
            type: String
            description: Subnet configuration directory (e.g., /data/avalanche-configs/subnets/C.json).
            default: !Ref SubnetConfigDirectory
          placeHolderWhitelistedSubnetId:
            type: String
            description: Whitelisted subnet Id that was used as a placeholder.
            default: !Ref PlaceHolderWhitelistedSubnetId
          newWhitelistedSubnetId:
            type: String
            description: New subnet id to whitelist.
            default: !Ref NewWhitelistedSubnetId
        mainSteps:
          - action: aws:runShellScript
            name: WhitelistSubnetWhitelistSubnet
            inputs:
              timeoutSeconds: "{{ scriptTimeout }}"
              runCommand:
                - |
                  #!/bin/bash
                  set -xeu

                  # do not use bash/sed hacks....
                  /usr/local/bin/avalanche-config --version

                  # sudo systemctl cat avalanche
                  /usr/local/bin/plugins/{{ vmId }} --version

                  # to replace the avalanche configuration
                  # sudo cat /data/avalanche-configs/config.json
                  /usr/local/bin/avalanche-config add-whitelist-subnet \
                  --log-level info \
                  --skip-prompt \
                  --original-config-file-path=/data/avalanche-configs/config.json \
                  --new-config-file-path=/tmp/avalanche.config.json

                  cat /tmp/avalanche.config.json
                  sudo cp /tmp/avalanche.config.json /data/avalanche-configs/config.json

                  # assume "avalanched" already wrote subnet config based on place holder whitelisted subnet id
                  # TODO: implement with "avalanche-config"
                  sudo cp {{ subnetConfigDirectory }}/{{ placeHolderWhitelistedSubnetId }}.json {{ subnetConfigDirectory }}/{{ newWhitelistedSubnetId }}.json

                  sudo systemctl restart avalanche
                  sleep 5
                  sudo tail -50 /var/log/avalanche/avalanche.log || true
                  # sudo tail -100 /var/log/avalanche/avalanche.log | grep {{ newWhitelistedSubnetId }}

                  # to check the status
                  # sudo find /var/log/avalanche/
                  # sudo tail /var/log/avalanche/avalanche.log
