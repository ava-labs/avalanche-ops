---
AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Auto Scaling Groups for amd64"

# takes about 2-minute for 3 nodes (without NLB)
# NLB takes about 3-minute

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
Parameters:
  Id:
    Type: String
    Description: Unique identifier, prefix for all resources created below.

  NetworkId:
    Type: Number
    Description: Avalanche network ID, used for resource tagging.

  NodeKind:
    Type: String
    AllowedValues: ["beacon", "non-beacon"]
    Description: Node kind.

  KmsCmkArn:
    Type: String
    Description: KMS CMK ARN that de/encrypts resources.

  S3BucketName:
    Type: String
    Description: S3 bucket name.

  Ec2KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 SSH key name

  InstanceProfileArn:
    Type: String
    Description: Instance profile ARN

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The public subnet IDs where node instances are to be created.

  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: EC2 security group ID

  ImageId:
    Type: String
    Default: ""
    Description: (Optional) Custom image ID. This value overrides any AWS Systems Manager Parameter Store value specified above.

  # https://ubuntu.com/server/docs/cloud-images/amazon-ec2
  # TODO: support arm64
  ImageIdSsmParameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID.

  # Avalanche consensus paper used "c5.large" for testing 125 ~ 2,000 nodes
  # Avalanche test net ("fuji") runs "c5.2xlarge"
  #
  # https://aws.amazon.com/ec2/instance-types/c6a/
  # c6a.large:   2 vCPU + 4  GiB RAM
  # c6a.xlarge:  4 vCPU + 8  GiB RAM
  # c6a.2xlarge: 8 vCPU + 16 GiB RAM
  #
  # https://aws.amazon.com/ec2/instance-types/m6a/
  # m6a.large:   2 vCPU + 8  GiB RAM
  # m6a.xlarge:  4 vCPU + 16 GiB RAM
  # m6a.2xlarge: 8 vCPU + 32 GiB RAM
  #
  # https://aws.amazon.com/ec2/instance-types/m5/
  # m5.large:   2 vCPU + 8  GiB RAM
  # m5.xlarge:  4 vCPU + 16 GiB RAM
  # m5.2xlarge: 8 vCPU + 32 GiB RAM
  #
  # https://aws.amazon.com/ec2/instance-types/c5/
  # c5.large:   2 vCPU + 4  GiB RAM
  # c5.xlarge:  4 vCPU + 8  GiB RAM
  # c5.2xlarge: 8 vCPU + 16 GiB RAM
  #
  # https://aws.amazon.com/ec2/instance-types/r5/
  # r5.large:   2 vCPU + 16 GiB RAM
  # r5.xlarge:  4 vCPU + 32 GiB RAM
  # r5.2xlarge: 8 vCPU + 64 GiB RAM
  #
  # https://aws.amazon.com/ec2/instance-types/t3/
  # t3.large:   2 vCPU + 8 GiB RAM
  # t3.xlarge:  4 vCPU + 16 GiB RAM
  # t3.2xlarge: 8 vCPU + 32 GiB RAM
  #
  InstanceTypes:
    Type: CommaDelimitedList
    Default: c6a.large,m6a.large,m5.large,c5.large
    Description: EC2 instance types

  InstanceTypesCount:
    Type: Number
    Default: 4
    MinValue: 1
    MaxValue: 4
    Description: The number of instance types

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-blockdevicemapping-ebs.html#cfn-ec2-launchtemplate-blockdevicemapping-ebs-volumetype
  VolumeType:
    Type: String
    Default: gp3
    Description: Volume type.

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-blockdevicemapping-ebs.html#cfn-ec2-launchtemplate-blockdevicemapping-ebs-volumesize
  VolumeSize:
    Type: Number
    Default: 400
    MinValue: 40
    MaxValue: 1024
    Description: Size of the root disk for the EC2 instances, in GiB.

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-blockdevicemapping-ebs.html#cfn-ec2-launchtemplate-blockdevicemapping-ebs-iops
  VolumeIops:
    Type: Number
    Default: 3000
    Description: The number of I/O operations per second (IOPS).

  # only for gp3
  # https://aws.amazon.com/ebs/volume-types/
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-blockdevicemapping-ebs.html#cfn-ec2-launchtemplate-blockdevicemapping-ebs-throughput
  # "1000" does not work -- "InvalidParameterValue - Throughput (MiBps) to iops ratio of 0.333333 is too high; maximum is 0.250000 MiBps per iops."
  VolumeThroughput:
    Type: Number
    Default: 500
    Description: The throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s.

  AsgMinSize:
    Type: Number
    Description: Minimum size auto scaling group
    Default: 1
    MinValue: 1
    MaxValue: 1000

  AsgMaxSize:
    Type: Number
    Description: Maximum size auto scaling group
    Default: 10
    MinValue: 1
    MaxValue: 1000

  AsgDesiredCapacity:
    Type: Number
    Description: Desired size auto scaling group
    Default: 5
    MinValue: 1
    MaxValue: 1000

  NlbTargetGroupArn:
    Type: String
    Default: ""
    Description: NLB target group ARN for ASG

  NlbVpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID

  NlbHttpPort:
    Type: Number
    Default: 9650
    Description: HTTP port (only required for NLB)

Conditions:
  HasImageId:
    Fn::Not:
      - Fn::Equals:
          - Ref: ImageId
          - ""

  Has2InstanceTypes:
    Fn::Or:
      - Fn::Equals:
          - Ref: InstanceTypesCount
          - 2
      - Fn::Equals:
          - Ref: InstanceTypesCount
          - 3
      - Fn::Equals:
          - Ref: InstanceTypesCount
          - 4

  Has3InstanceTypes:
    Fn::Or:
      - Fn::Equals:
          - Ref: InstanceTypesCount
          - 3
      - Fn::Equals:
          - Ref: InstanceTypesCount
          - 4

  Has4InstanceTypes:
    Fn::Equals:
      - Ref: InstanceTypesCount
      - 4

  # only create 1 NLB once
  # for both beacon- and non-beacon nodes
  EmptyNlbTargetGroupArn:
    Fn::Equals:
      - Ref: NlbTargetGroupArn
      - ""

Resources:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
  # takes 3-minute
  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: EmptyNlbTargetGroupArn
    Properties:
      Type: network
      # load balancer name '...' cannot be longer than '32' characters
      Name: !Join ["-", [!Ref Id, "nlb"]]
      Subnets: !Ref PublicSubnetIds
      # load balancer name '...' cannot be longer than '32' characters
      Tags:
        - { Key: Name, Value: !Sub "${Id}-nlb" }

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: EmptyNlbTargetGroupArn
    Properties:
      # Target group name '...' cannot be longer than '32' characters
      Name: !Join ["-", [!Ref Id, "tg"]]
      # Health check enabled must be true for target groups
      # with target type 'instance'
      HealthCheckEnabled: true
      HealthCheckProtocol: TCP
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref NlbVpcId
      Port: !Ref NlbHttpPort
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: EmptyNlbTargetGroupArn
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBTargetGroup
      LoadBalancerArn: !Ref NLB
      Port: !Ref NlbHttpPort
      Protocol: TCP

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html
  ASGLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Join ["-", [!Ref Id, !Ref NodeKind, "amd64"]]
      LaunchTemplateData:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata-iaminstanceprofile.html
        IamInstanceProfile:
          Arn: !Ref InstanceProfileArn
        ImageId:
          Fn::If:
            - HasImageId
            - !Ref ImageId
            - !Ref ImageIdSsmParameter
        KeyName: !Ref Ec2KeyPairName

        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-blockdevicemapping.html
        BlockDeviceMappings:
          - DeviceName: "/dev/xvdb"
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-blockdevicemapping-ebs.html
            Ebs:
              VolumeType: !Ref VolumeType
              VolumeSize: !Ref VolumeSize
              Iops: !Ref VolumeIops
              Throughput: !Ref VolumeThroughput
              DeleteOnTermination: true
              Encrypted: true
        Monitoring:
          Enabled: true

        # need this for public DNS + SSH access
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeleteOnTermination: true
            DeviceIndex: 0
            Groups:
              - !Ref SecurityGroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - { Key: Name, Value: !Sub "${Id}-${NodeKind}-amd64" }
          - ResourceType: volume
            Tags:
              - { Key: Name, Value: !Sub "${Id}-${NodeKind}-amd64" }

        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html#cfn-ec2-launchtemplate-launchtemplatedata-userdata
        # https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/QuickStartEC2Instance.html
        # /var/log/cloud-init-output.log
        # takes about 3-minute
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash
              set -xeu

              export DEBIAN_FRONTEND=noninteractive
              sudo apt-get update -y && sudo apt-get upgrade -y \
              && sudo apt-get install -y \
                  curl wget unzip zip gzip tar libssl-dev \
                  python3-pip python-setuptools

              curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscli.v2.zip
              unzip awscli.v2.zip
              sudo ./aws/install
              /usr/local/bin/aws --version

              # https://docs.aws.amazon.com/systems-manager/latest/userguide/agent-install-ubuntu.html
              sudo snap install amazon-ssm-agent --classic
              sudo systemctl enable snap.amazon-ssm-agent.amazon-ssm-agent.service
              sudo systemctl restart snap.amazon-ssm-agent.amazon-ssm-agent.service
              mkdir -p /etc/systemd/system/snap.amazon-ssm-agent.amazon-ssm-agent.service.d
              cat > /etc/systemd/system/snap.amazon-ssm-agent.amazon-ssm-agent.service.d/10-restart-always.conf <<EOF
              [Service]
              Restart=always
              RestartSec=60s
              EOF
              sudo systemctl start --no-block snap.amazon-ssm-agent.amazon-ssm-agent.service

              TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
              INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" --retry 3 -s http://169.254.169.254/latest/meta-data/instance-id)
              ATTACHMENT_STATE="unknown"
              until [ "$ATTACHMENT_STATE" == "attached" ]; do
                ATTACHMENT_STATE=$(aws ec2 describe-volumes \
                      --region ${AWS::Region} \
                      --filters \
                        Name=attachment.instance-id,Values=$INSTANCE_ID \
                        Name=attachment.device,Values=/dev/xvdb \
                      --query Volumes[].Attachments[].State \
                      --output text)
                sleep 2
              done

              # TODO: why device name is not "/dev/xvdb"?
              sudo mkfs -t ext4 /dev/nvme1n1
              mkdir -p /avalanche-data
              sudo mount /dev/nvme1n1 /avalanche-data -t ext4
              # auto remount in case of instance reboot
              sudo echo '/dev/nvme1n1       /avalanche-data   ext4    defaults,nofail 0       2' >> /etc/fstab
              sudo mount --all
              lsblk
              df -h

              aws s3 cp s3://${S3BucketName}/${Id}/install/avalanched /tmp/avalanched
              chmod +x /tmp/avalanched
              sudo mv /tmp/avalanched /usr/local/bin/avalanched

              # aws s3 cp s3://${S3BucketName}/${Id}/install/avalanche /tmp/avalanche
              # chmod +x /tmp/avalanche
              # sudo mv /tmp/avalanche /usr/local/bin/avalanche

              # TODO: make this configurable?
              mkdir -p /var/log/avalanched
              chmod 755 /var/log/avalanched
              mkdir -p /etc/pki/tls/certs
              chmod 755 /etc/pki/tls/certs
              mkdir -p /var/log/avalanche
              chmod 755 /var/log/avalanche

              cat > /tmp/avalanched.service <<EOF
              [Unit]
              Description=avalanched (avalanche agent)

              [Service]
              Type=notify
              Restart=always
              RestartSec=5s
              LimitNOFILE=40000
              ExecStart=/usr/local/bin/avalanched --avalanche-bin /usr/local/bin/avalanche --cloudwatch-config-file-path /opt/aws/amazon-cloudwatch-agent/bin/config.json
              StandardOutput=file:/var/log/avalanched/avalanched.log
              StandardError=file:/var/log/avalanched/avalanched.log

              [Install]
              WantedBy=multi-user.target
              EOF
              sudo mv /tmp/avalanched.service /etc/systemd/system/avalanched.service
              sudo systemctl daemon-reload
              sudo systemctl enable avalanched.service
              sudo systemctl start --no-block avalanched.service

              # https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/QuickStartEC2Instance.html
              mkdir -p /tmp/install-cloudwatch-logs
              pushd /tmp/install-cloudwatch-logs
              wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
              sudo dpkg -i -E ./amazon-cloudwatch-agent.deb
              popd

              # enough time for "avalanched" to initialize cloudwatch configuration
              sleep 10
              echo "wait until /opt/aws/amazon-cloudwatch-agent/bin/config.json is written by avalanched"
              while [[ ! -s /opt/aws/amazon-cloudwatch-agent/bin/config.json ]]
                do
                echo "waiting for /opt/aws/amazon-cloudwatch-agent/bin/config.json creation"
                sleep 5
                # wait up to 5-minute
                ((c++)) && ((c==60)) && break
              done

              cat /opt/aws/amazon-cloudwatch-agent/bin/config.json
              /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
              mkdir -p /etc/systemd/system/amazon-cloudwatch-agent.service.d
              cat <<EOF > /etc/systemd/system/amazon-cloudwatch-agent.service.d/10-restart-always.conf
              [Service]
              Restart=always
              RestartSec=60s
              EOF

              # NOT WORKING; "print 'revision: %(revno)s' % version_info"
              # curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz -o /tmp/aws-cfn-bootstrap-latest.tar.gz
              # pip install /tmp/aws-cfn-bootstrap-latest.tar.gz
              # if [[ $? -ne 0 ]]; then
              #   /usr/local/bin/cfn-signal --resource AutoScalingGroup \
              #     --stack ${AWS::StackName} \
              #     --region ${AWS::Region} \
              #     --success false
              # else
              #   /usr/local/bin/cfn-signal -e $? --resource AutoScalingGroup \
              #     --stack ${AWS::StackName} \
              #     --region ${AWS::Region}
              # fi

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref AsgMinSize
        MaxBatchSize: 1
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Properties:
      AutoScalingGroupName: !Join ["-", [!Ref Id, !Ref NodeKind, "amd64"]]
      MinSize: !Ref AsgMinSize
      MaxSize: !Ref AsgMaxSize
      DesiredCapacity: !Ref AsgDesiredCapacity
      VPCZoneIdentifier: !Ref PublicSubnetIds
      TargetGroupARNs:
        - Fn::If:
            - EmptyNlbTargetGroupArn
            - !Ref NLBTargetGroup
            - !Ref NlbTargetGroupArn
      HealthCheckType: EC2
      HealthCheckGracePeriod: 120
      MetricsCollection:
        - Granularity: "1Minute"
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Join ["-", [!Ref Id, !Ref NodeKind, "amd64"]]
        - Key: ID
          PropagateAtLaunch: true
          Value: !Ref Id
        - Key: NETWORK_ID
          PropagateAtLaunch: true
          Value: !Ref NetworkId
        - Key: NODE_KIND
          PropagateAtLaunch: true
          Value: !Ref NodeKind
        - Key: KMS_CMK_ARN
          PropagateAtLaunch: true
          Value: !Ref KmsCmkArn
        - Key: S3_BUCKET_NAME
          PropagateAtLaunch: true
          Value: !Ref S3BucketName
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-mixedinstancespolicy.html
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: "prioritized"
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplate.html
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref ASGLaunchTemplate
            Version: !GetAtt ASGLaunchTemplate.LatestVersionNumber
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-autoscaling-autoscalinggroup-launchtemplateoverrides.html
          Overrides:
            - InstanceType: !Select [0, !Ref InstanceTypes]
            - Fn::If:
                - Has2InstanceTypes
                - InstanceType: !Select [1, !Ref InstanceTypes]
                - !Ref AWS::NoValue
            - Fn::If:
                - Has3InstanceTypes
                - InstanceType: !Select [2, !Ref InstanceTypes]
                - !Ref AWS::NoValue
            - Fn::If:
                - Has4InstanceTypes
                - InstanceType: !Select [3, !Ref InstanceTypes]
                - !Ref AWS::NoValue

Outputs:
  # same as "AutoScalingGroupName"
  AsgLogicalId:
    Value: !Ref ASG

  NlbArn:
    Condition: EmptyNlbTargetGroupArn
    Value: !Ref NLB

  NlbTargetGroupArn:
    Condition: EmptyNlbTargetGroupArn
    Value: !Ref NLBTargetGroup

  NlbDnsName:
    Condition: EmptyNlbTargetGroupArn
    Value: !GetAtt NLB.DNSName
