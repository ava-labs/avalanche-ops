name: Test and release

# ref. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:

permissions:
  contents: write

jobs:
  static_analysis:
    name: Static analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt, clippy
          override: true
      - name: Check Rust version
        run: rustc --version
      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true
      - name: Run static analysis tests
        shell: bash
        run: scripts/tests.lint.sh

  check_cargo_unused:
    name: Check Cargo unused
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt, clippy
          override: true
      - name: Check Rust version
        run: rustc --version
      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true
      - name: Check unused Cargo dependencies
        shell: bash
        run: scripts/tests.unused.sh

  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Check Rust version
        run: rustc --version
      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true
      - name: Run unit tests
        run: scripts/tests.unit.sh

  release:
    name: Release ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    needs: [static_analysis, check_cargo_unused, unit_tests]
    strategy:
      matrix:
        job:
          # https://doc.rust-lang.org/nightly/rustc/platform-support.html
          - os: ubuntu-latest
            platform: linux
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            platform: darwin
            target: x86_64-apple-darwin
          # ref. https://github.com/clux/muslrust
          # ref. https://github.com/sfackler/rust-openssl/issues/1405
          # - os: ubuntu-latest
          #   platform: linux
          #   target: aarch64-unknown-linux-musl
          - os: macos-latest
            platform: darwin
            target: aarch64-apple-darwin
          # - os: windows-latest
          #   platform: win32
          #   target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true
      - name: Check Rust version
        run: rustc --version

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      # ref. https://github.com/gakonst/foundry/blob/master/.github/workflows/cross-platform.yml
      - name: Apple M1 setup
        if: matrix.job.target == 'aarch64-apple-darwin'
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      # ref. https://github.com/gakonst/foundry/blob/master/.github/workflows/cross-platform.yml
      # ref. https://github.com/briansmith/ring/blob/main/mk/install-build-tools.sh
      # ref. https://github.com/briansmith/ring/issues/1414
      # ref. https://github.com/zellij-org/zellij/blob/main/.github/workflows/release.yml
      # ref. https://github.com/sfackler/rust-openssl/issues/621
      - name: Linux ARM64 setup with musl-tools
        if: matrix.job.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get install -y --no-install-recommends pkg-config libssl-dev musl-tools clang llvm
          echo "CC_aarch64_unknown_linux_musl=clang" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_musl=llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS=\"-Clink-self-contained=yes -Clinker=rust-lld\"" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV

      - name: Compile binaries
        env:
          RUSTFLAGS: -C link-args=-s
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --bin avalancheup-aws --bin avalanched-aws --target ${{ matrix.job.target }}

      - name: Compress binaries
        id: release_artifacts
        env:
          PLATFORM_NAME: ${{ matrix.job.platform }}
          TARGET: ${{ matrix.job.target }}
        shell: bash
        run: |
          if [ "$PLATFORM_NAME" == "linux" ]; then

            ./target/${TARGET}/release/avalancheup-aws --help
            cp ./target/${TARGET}/release/avalancheup-aws avalancheup-aws.${TARGET}
            echo "::set-output name=file_name_avalancheup_aws::avalancheup-aws.${TARGET}"
            tar -czvf avalancheup-aws_${TARGET}.tar.gz -C ./target/${TARGET}/release avalancheup-aws
            echo "::set-output name=file_name_avalancheup_aws_tar_gz::avalancheup-aws_${TARGET}.tar.gz"

            ./target/${TARGET}/release/avalanched-aws --help
            cp ./target/${TARGET}/release/avalanched-aws avalanched-aws.${TARGET}
            echo "::set-output name=file_name_avalanched_aws::avalanched-aws.${TARGET}"
            tar -czvf avalanched-aws_${TARGET}.tar.gz -C ./target/${TARGET}/release avalanched-aws
            echo "::set-output name=file_name_avalanched_aws_tar_gz::avalanched-aws_${TARGET}.tar.gz"

          elif [ "$PLATFORM_NAME" == "darwin" ]; then

            cp ./target/${TARGET}/release/avalancheup-aws avalancheup-aws.${TARGET}
            echo "::set-output name=file_name_avalancheup_aws::avalancheup-aws.${TARGET}"
            gtar -czvf avalancheup-aws_${TARGET}.tar.gz -C ./target/${TARGET}/release avalancheup-aws
            echo "::set-output name=file_name_avalancheup_aws_tar_gz::avalancheup-aws_${TARGET}.tar.gz"

            cp ./target/${TARGET}/release/avalanched-aws avalanched-aws.${TARGET}
            echo "::set-output name=file_name_avalanched_aws::avalanched-aws.${TARGET}"
            gtar -czvf avalanched-aws_${TARGET}.tar.gz -C ./target/${TARGET}/release avalanched-aws
            echo "::set-output name=file_name_avalanched_aws_tar_gz::avalanched-aws_${TARGET}.tar.gz"

          else

            echo "skipping $PLATFORM_NAME"

          fi

      # release tip from latest commits
      # https://github.com/softprops/action-gh-release
      # https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
      - name: Release latest
        uses: softprops/action-gh-release@v1
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          name: Latest release
          tag_name: latest
          prerelease: true
          body: Latest builds from the last commit.
          files: |
            ${{ steps.release_artifacts.outputs.file_name_avalancheup_aws }}
            ${{ steps.release_artifacts.outputs.file_name_avalancheup_aws_tar_gz }}
            ${{ steps.release_artifacts.outputs.file_name_avalanched_aws }}
            ${{ steps.release_artifacts.outputs.file_name_avalanched_aws_tar_gz }}

      # release only for tags
      # https://github.com/softprops/action-gh-release
      # https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
      - name: Release tag
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: true
          prerelease: true
          body: Release builds for ${{ github.ref_name }}.
          files: |
            ${{ steps.release_artifacts.outputs.file_name_avalancheup_aws }}
            ${{ steps.release_artifacts.outputs.file_name_avalancheup_aws_tar_gz }}
            ${{ steps.release_artifacts.outputs.file_name_avalanched_aws }}
            ${{ steps.release_artifacts.outputs.file_name_avalanched_aws_tar_gz }}
